drop sequence lecture_no_seq;
drop sequence video_no_seq;
drop sequence comments_no_seq;

create sequence lecture_no_seq
increment by 1
start with 1
minvalue 1
maxvalue 100
nocycle
nocache;

create sequence comments_no_seq
increment by 1
start with 1
minvalue 1
maxvalue 200
nocycle
nocache;

create sequence video_no_seq
increment by 1
start with 1
minvalue 1
maxvalue 100
nocycle
nocache;


drop package member_pkg;
create or replace package member_pkg
is
    procedure insert_member(input_id in varchar2,
        input_password in varchar2,
        input_name in varchar2,
        input_email in varchar2,
        input_phoneNumber in varchar2);

    procedure select_memberById(input_id in varchar2,
    res_cur out sys_refcursor);

    procedure select_memberByEmail(input_email in varchar2,
    res_cur out sys_refcursor);

    procedure select_memberByPhone(input_phone in varchar2,
    res_cur out sys_refcursor);

    procedure login_member(input_id in varchar2,
    input_pw in varchar2,
    res_cur out sys_refcursor);

    procedure update_member(input_id in varchar2,
    input_password in varchar2,
    input_email in varchar2,
    input_phoneNumber in varchar2,
    res out number);

    procedure update_password(input_id in varchar2,
    prev_password in varchar2,
    new_password in varchar2,
    res out number);

    procedure delete_member(input_id in varchar2,
    input_password in varchar2,
    res out number);

    procedure find_id(input_email in varchar2,
    res out number);

    procedure find_pw(input_id in varchar2,
    res out number);
    
    procedure get_member_lecture(input_id in varchar2,
    res_cur out sys_refcursor);
    
    procedure get_member_lecture_date(input_memberid in varchar2,
    input_lectureid in varchar2,
    res_cur out sys_refcursor);
    
    procedure get_member_instructor(input_member_id in varchar2,
    res_cur out sys_refcursor);
    
    procedure get_instructor_lecture(
    input_member_id in varchar2,
    res_cur out sys_refcursor);
    
    procedure get_lecture_count(
    input_lecture_id in varchar2,
    cnt out number);
    
    procedure get_lecture_instructor(input_member_id in varchar2,
    input_lecture_id in varchar2,
    res_cur out sys_refcursor);
    
    procedure select_memberByNickname(input_nickname in varchar2,
    res_cur out sys_refcursor);
end member_pkg;


create or replace package body member_pkg
is
    procedure insert_member(input_id in varchar2,
        input_password in varchar2,
        input_name in varchar2,
        input_email in varchar2,
        input_phoneNumber in varchar2)
    as
    begin  
        insert into member(id, password, name, email, phone)
        values(input_id, input_password, input_name, input_email,
        input_phoneNumber);
        commit;
    end insert_member;

    procedure select_memberById(input_id in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select * from member
        where id = input_id;
    end select_memberById;

    procedure select_memberByEmail(input_email in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select * from member
        where email = input_email;
    end select_memberByEmail;

    procedure select_memberByPhone(input_phone in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select * from member
        where phone = input_phone;
    end select_memberByPhone;

    procedure login_member(input_id in varchar2,
    input_pw in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select * from member
        where id = input_id and password = input_pw;
    end login_member;

    procedure update_member(input_id in varchar2,
    input_password in varchar2,
    input_email in varchar2,
    input_phoneNumber in varchar2,
    res out number)
    as
        cnt number(5);
    begin
        select count(*) into cnt
        from member
        where id = input_id
        and password = input_password;

        if cnt > 0  then
            res := 1;
            update member
            set email = input_email,
            phone = input_phoneNumber
            where id = input_id and password = input_password;
            commit;
        else
            res := 0;
        end if;
    end update_member;  

    procedure update_password(input_id in varchar2,
    prev_password in varchar2,
    new_password in varchar2,
    res out number)
    as
    prev_pwd varchar2(200);
    begin
        select password into prev_pwd
        from member
        where id = input_id;

        if prev_password = prev_pwd then
            update member
            set password = new_password
            where id = input_id;
            res := 1;
            commit;
        else
            res := 0;
        end if;
    end update_password;

    procedure delete_member(input_id in varchar2,
    input_password in varchar2,
    res out number)
    as
        cnt number(5);
    begin
        select count(*) into cnt
        from member
        where id = input_id and
        password = input_password;

        if cnt > 0 then
            delete from lecture
            where id in (select lecture_id
            from enrollment where input_id = member_id);
            delete from member
            where id = input_id;
            commit;
            res := 1;
        else
            res := 0;
        end if;
    end delete_member;

    procedure find_id(input_email in varchar2,
    res out number)
    as
    begin
        select count(*) into res
        from member
        where email = input_email;
    end find_id;

    procedure find_pw(input_id in varchar2,
    res out number)
    as
    begin
        select count(*) into res
        from member
        where id = input_id;
    end find_pw;
    
    procedure get_member_lecture(input_id in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select id, name, genre,image, duration, caution, introduce, thumbnail
        from ((select * from member_lecture where member_id = input_id) A
        inner join lecture B on (A.lecture_id = B.id));
    end get_member_lecture;
    
    procedure get_member_lecture_date(input_memberid in varchar2,
    input_lectureid in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select start_date, end_date
        from member_lecture
        where lecture_id = input_lectureid and 
        member_id = input_memberid;
    end get_member_lecture_date;
    
    procedure get_member_instructor(input_member_id in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select * 
        from instructor
        where member_id = input_member_id;
    end get_member_instructor;
    
    procedure get_instructor_lecture(
    input_member_id in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select id, name, genre, image, duration, caution, introduce, thumbnail
        from ((select * from enrollment where member_id = input_member_id) A
        inner join lecture B on (A.lecture_id = B.id));
    end get_instructor_lecture;
    
    procedure get_lecture_count(
    input_lecture_id in varchar2,
    cnt out number)
    as
    begin
        select count(*) into cnt
        from member_lecture
        where input_lecture_id = lecture_id;
    end get_lecture_count;
    
    procedure get_lecture_instructor(input_member_id in varchar2,
    input_lecture_id in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select A.*
        from instructor A, enrollment B
        where B.lecture_id = input_lecture_id and
        A.member_id = input_member_id;
    end get_lecture_instructor;
    
    procedure select_memberByNickname(input_nickname in varchar2,
    res_cur out sys_refcursor)
    as
    begin
        open res_cur for
        select * from instructor
        where nickname = input_nickname;
    end select_memberByNickname;
    
end member_pkg;

drop package lecture_pkg;
create or replace package lecture_pkg
is
    procedure enroll_lecture(
    input_member_id in varchar2,
    input_name in varchar2,
    input_genre in varchar2,
    input_duration in number,
    input_caution in varchar2,
    input_introduce in varchar2,
    input_thumbnail in varchar2,
    input_image in varchar2);

    procedure lecture_video_proc(
    input_lecture_id in number,
    input_title in varchar2,
    input_src in varchar2);


    procedure lecture_del_proc(
    p_lecture in number);


end lecture_pkg;



create or replace package body lecture_pkg
is
    procedure enroll_lecture(
    input_member_id in varchar2,
    input_name in varchar2,
    input_genre in varchar2,
    input_duration in number,
    input_caution in varchar2,
    input_introduce in varchar2,
    input_thumbnail in varchar2,
    input_image in varchar2)
    as
        lecture_id number(5);
    begin
        lecture_id := lecture_no_seq.nextval;
        insert into lecture
        values(lecture_id, input_name, input_genre, input_image,
        input_duration, input_caution, input_introduce, input_thumbnail);
        insert into enrollment
        values(input_member_id, lecture_id);
        commit;
    end enroll_lecture;
    
    procedure lecture_video_proc(
    input_lecture_id in number,
    input_title in varchar2,
    input_src in varchar2
    )
    as
    video_id number(5);
    begin
    video_id := video_no_seq.nextval;
    insert into video
    values(video_id, input_title, input_src);  
    insert into lecture_video
    values(input_lecture_id, video_id);
    commit;
    end lecture_video_proc;


    procedure lecture_del_proc(
    p_lecture in number
    )
   as
   begin
   delete
       from video
       where id 
       in (select video_id
          from lecture_video
          where lecture_id = p_lecture);

     delete
     from lecture
     where id = p_lecture;
     
     commit;
     end lecture_del_proc;

end lecture_pkg;
